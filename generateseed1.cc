
//type -> Type_t
//int -> Int_t
//double -> Double_t

const int NSamples = 1024;
TRandom *myrand = new TRandom(1000);
const int NEvents = 100000;
const int MAXNSIGNALS = 2;

const int upscale_factor = 4;

Double_t times[MAXNSIGNALS];
Double_t amps[MAXNSIGNALS];
Double_t maxtime[MAXNSIGNALS];
int iWave;

Double_t unit_resp_ecal[1024] = {0.17120551684002258, 0.27047428972048837, 0.37581206319099, 0.47466072571275586, 0.5669792311372097, 0.6516897796857086, 0.7248770520562555, 0.7848923310826994, 0.8343679904494198, 0.8760176681180029, 0.9098026874122191, 0.9348318619887774, 0.9543260769060126, 0.9703884684292948, 0.9822267252989896, 0.9895501936124732, 0.9947025467192914, 0.9986038727923516, 1.0, 0.999607803790932, 0.9975921839810219, 0.9957876201989172, 0.9930865789095779, 0.9911917953535325, 0.9892386771509529, 0.9854152186850621, 0.9796478398491018, 0.9731194715078744, 0.9682651299404851, 0.965113652178465, 0.961535996613427, 0.9571343880589668, 0.9508963002275922, 0.9444424481977494, 0.9376253843264691, 0.9307434555238405, 0.9235781370872318, 0.917526502489006, 0.9114952598792687, 0.9050899438313166, 0.8992455709905012, 0.8942203944496944, 0.8894762221465917, 0.8833892451889487, 0.8757600209167851, 0.8686523443527854, 0.8632882717818867, 0.8578877322990003, 0.8516958939218432, 0.8449291407249394, 0.8388726535962439, 0.833236297179391, 0.8273924432871348, 0.8215456294813778, 0.8165485221872456, 0.8129446825050042, 0.8086157815465553, 0.8032902213329239, 0.7978602375971204, 0.7925500774515173, 0.7877138880649184, 0.7834549188973801, 0.7802908047606424, 0.7760294773265309, 0.7704754845227428, 0.7648478000117398, 0.7598128318926795, 0.7555894245925305, 0.75178228810746, 0.7478395793564576, 0.7445643916993067, 0.7400608485815884, 0.7346004338548546, 0.7296756612808235, 0.725489183434653, 0.7214991106414242, 0.7170952291787972, 0.7126006642225624, 0.7086695673183502, 0.7053923364429411, 0.7024549117443325, 0.6992458288961972, 0.6962082887512724, 0.6930566382827503, 0.6897536497342704, 0.6865845910007493, 0.6827138614498865, 0.6783133882319925, 0.6737640059426788, 0.6700940108684054, 0.6668308944229415, 0.6631771769939285, 0.6589865339089049, 0.6546232130448345, 0.6505037141427445, 0.6466785437708652, 0.6438523444249461, 0.6423434518092229, 0.6405428957114349, 0.6381878605572329, 0.6354407891202035, 0.632475814442279, 0.6289290988508585, 0.6252055348686363, 0.6217747197193588, 0.6193751000310758, 0.6167686016106111, 0.6134508679512665, 0.6096758690482597, 0.606256755045834, 0.6028553885375401, 0.6002198947191482, 0.5982333396968632, 0.5960337858003739, 0.5934567419575437, 0.5908158562560636, 0.5878552614320884, 0.5850920833329659, 0.582653135142099, 0.5806410768202926, 0.5794954902823825, 0.5771816767898523, 0.5739178142504981, 0.5708983938152955, 0.5678403945750832, 0.5645290503352095, 0.5613286082680423, 0.5581163112734728, 0.5562624954153887, 0.5552074407712748, 0.5538035330977101, 0.5521959592981998, 0.550019677215828, 0.5477664847344671, 0.5450730876423336, 0.5422802243301067, 0.5398744959980102, 0.536560504593487, 0.5330380602083863, 0.5297611901140277, 0.5271307983641454, 0.5243536705556944, 0.5221460980261252, 0.5205148620921396, 0.5180127994367485, 0.5151812747015929, 0.5127630226766628, 0.5108382918545696, 0.5091555601071214, 0.5067956726056285, 0.5034071766848683, 0.5004060574028615, 0.49861806350247256, 0.4969380690266696, 0.4947052848592395, 0.49269794466247324, 0.4908367943675124, 0.48896828265904635, 0.4874737817028865, 0.48581119609850076, 0.4841886506341818, 0.4822691740061583, 0.4795791751317974, 0.4768182914825261, 0.47448987831055217, 0.47315448131856513, 0.47167340311327816, 0.47004612292559184, 0.4684159216742601, 0.4667830427587335, 0.46419545608206636, 0.46189559384363194, 0.4599447509919755, 0.45839000719963274, 0.4571220852966975, 0.4557177886893032, 0.4534749889834962, 0.45047428525447825, 0.44809351634262096, 0.44645631293774296, 0.4456099632581614, 0.4444362802803243, 0.4425175114945061, 0.4405451500203963, 0.4379648591322902, 0.43605857531844117, 0.43424453877496627, 0.4327217972487297, 0.4312417771772528, 0.42982238048723004, 0.4281540690369635, 0.42645077248556246, 0.4248963409177324, 0.4232128537854212, 0.42108547132150315, 0.4190027826055435, 0.41724871421047116, 0.41607758560228303, 0.41508122791486807, 0.4140485847435675, 0.4124080961503166, 0.4109775399529643, 0.40947945736120883, 0.4072233653133147, 0.4047408690260954, 0.40308383901001543, 0.402404618215486, 0.40109953235138646, 0.39922546016749183, 0.3970838141507659, 0.3956711028193671, 0.39464425387579044, 0.39343960377862386, 0.39192359561638124, 0.390423539936124, 0.3885043463719441, 0.3862719113569926, 0.3843757722256855, 0.3826335354853194, 0.3801334080535037, 0.3780550887296774, 0.37719892275798866, 0.3762471278912884, 0.37492555615355844, 0.3742494659625792, 0.37355728889207596, 0.3726943148628779, 0.3717241366122909, 0.3706121085460063, 0.3687775343783739, 0.3664410016024634, 0.3646793443193931, 0.3633865384559664, 0.36240768738475504, 0.3613666947689133, 0.35919307810356366, 0.3563954089398199, 0.3543613269456803, 0.35291067946782695, 0.35185238040570205, 0.35134086361643957, 0.3508242209097306, 0.3497488044832231, 0.34762957004191614, 0.3457353876096048, 0.3445821299011354, 0.3435006624028419, 0.3425933916930116, 0.341227228303602, 0.3395039290613557, 0.3375124460510174, 0.335854288639817, 0.33462221073747656, 0.3338150730376307, 0.3331702426345533, 0.33216549095876563, 0.3309965268795753, 0.3299643669401017, 0.32898618345405267, 0.3276952938566749, 0.3263168729428834, 0.32481120127563806, 0.3237330334275453, 0.32275304347780026, 0.32134452576740036, 0.3198531613861695, 0.31819257917905946, 0.3164764990710316, 0.3145624077576295, 0.3126134374246658, 0.31107118866507305, 0.3101214943400715, 0.30933975265008357, 0.308395380843991, 0.307216824739872, 0.30620975765215586, 0.3054239228157065, 0.30510450396058264, 0.30413401307579496, 0.3030896528972139, 0.30156229945155816, 0.2997377493550061, 0.2979651814639144, 0.2968664393579805, 0.2955644675313595, 0.2940486686075016, 0.2932552193983919, 0.29320541684883084, 0.2927234496457858, 0.2911724637546628, 0.28951305866238564, 0.28853342230153334, 0.2879838518413865, 0.28724191302806074, 0.2865648535443903, 0.2858119761263997, 0.28482505676677894, 0.28347090561308197, 0.28207338089118705, 0.28102374606321806, 0.27985411867369525, 0.27839255745400243, 0.2771339207351474, 0.2758460848452947, 0.2749908969635593, 0.274382496513531, 0.27363675494371664, 0.272956694369581, 0.2718744814324404, 0.2705937716442931, 0.2689909158229404, 0.26792484970468655, 0.26676369109886966, 0.26513576815867057, 0.2636871823979989, 0.26296443125936925, 0.26268855546782927, 0.2624317508011121, 0.262127015979967, 0.26094023935690164, 0.2596903355641737, 0.2585873869057228, 0.25801547331438296, 0.25753866547391263, 0.25693967450976596, 0.2564719255658222, 0.2559255400559296, 0.25518988314167845, 0.2541287332638604, 0.252898053305292, 0.25182887357930167, 0.250557596594409, 0.2494099716668244, 0.24824547819578666, 0.24733515524661262, 0.24680105096091187, 0.24557522051201267, 0.24420789683148555, 0.24376912475354032, 0.2433460642278741, 0.24262176495718268, 0.24182457893463352, 0.24147551475815704, 0.24078337157186397, 0.23956726669928557, 0.2386587589315742, 0.2376330589140383, 0.2365627332251213, 0.23544207636192158, 0.234561489109359, 0.23317835603329107, 0.23203323232605938, 0.23124327012740514, 0.2313127865150866, 0.23042436773064862, 0.2288268400242928, 0.2274767296972642, 0.22674516287276886, 0.22627833483414353, 0.2256141519370189, 0.22492461042340509, 0.22425255116892254, 0.22359546116755602, 0.22294660293218793, 0.22214273176227098, 0.22105174182352322, 0.22031461525239363, 0.21947654002706027, 0.21843813289984426, 0.21741762304830323, 0.21609497578033257, 0.21462484425466566, 0.21350326858560026, 0.21332996623366535, 0.21309954069086784, 0.21236828100863311, 0.21124707504825113, 0.21005696255070397, 0.20914594477895215, 0.20836273390124602, 0.20788355683469412, 0.20799850965482658, 0.2079595197729291, 0.2075016347510228, 0.2065715786218298, 0.20592860990429993, 0.20454033528129997, 0.20297684360431162, 0.20194996807383483, 0.20143693012536537, 0.20099033346344372, 0.20021529014628459, 0.19963844351831353, 0.19923583352288504, 0.19884432976966293, 0.19835163484997076, 0.1980774189282065, 0.1976258408742421, 0.19678694469081304, 0.1957323676834379, 0.19482800633623182, 0.19381452020553414, 0.19275048970930533, 0.19166079125563176, 0.19068562431835218, 0.19002160320633507, 0.18978360760504953, 0.18935492979601484, 0.1888717999812953, 0.1885075752513945, 0.18792736071427812, 0.18717532383015076, 0.1868486334511548, 0.18632277518165286, 0.1852504721800367, 0.18414085243666237, 0.18326989397292448, 0.18228368335354853, 0.18172965292141213, 0.1808250091892565, 0.18002880159409054, 0.17946197861468424, 0.17906114987284824, 0.17812607679010897, 0.17734836798886333, 0.17695879959852068, 0.17681197599814888, 0.17661123680532678, 0.17581623535237406, 0.17490172015933003, 0.1739853773113164, 0.17375977524928055, 0.17357239908843075, 0.17314958146727327, 0.17254639118165085, 0.17226353450982262, 0.1722204812501425, 0.17210480970460665, 0.17154978632104967, 0.17070782488668512, 0.16981327281343092, 0.16912759368887698, 0.16816140627428994, 0.16681347640965613, 0.16625952097757885, 0.16597045986821957, 0.16508610329771997, 0.16416403040642397, 0.16327034693052977, 0.16269933295295858, 0.1627297820978517, 0.16245816894363588, 0.16217817637689017, 0.16153025928059417, 0.1608928639567271, 0.16025274616363144, 0.15971045195689812, 0.1587746912875025, 0.1580509621352683, 0.15747470444902809, 0.1572573562090349, 0.1567668849228297, 0.1562533927646126, 0.15531027923930205, 0.15433222950881076, 0.1536885937777304, 0.15334987056626306, 0.15292973836338186, 0.1526185491587476, 0.15220337491157976, 0.15127515790724178, 0.15051675909635154, 0.1500141715024894, 0.14974645517231744, 0.1494564391472965, 0.14970655597112711, 0.14919661179172894, 0.14821537884660155, 0.14737449168445554, 0.14634105087562382, 0.14568498699613852, 0.14535816811438423, 0.1447396195517184, 0.1440889027641217, 0.14340766633722637, 0.1430905474913813, 0.1431401303985948, 0.14317550012074087, 0.14274943901990905, 0.1425545340859788, 0.14229074946850126, 0.141870053638459, 0.14117961245625732, 0.14078003945306183, 0.14028058421808212, 0.13970483543873444, 0.13899623910550274, 0.1383674451552173, 0.1372255725069725, 0.1363691126205053, 0.13610542058626113, 0.1356543274550463, 0.13498426896673366, 0.1343075186650651, 0.13421707040443673, 0.13423679458449014, 0.13409061007298334, 0.13380868398977788, 0.13333259153290108, 0.1325437384363404, 0.13185223054390735, 0.13077247670948225, 0.1302183093159762, 0.13000664212850188, 0.1300940761986572, 0.12978556947646508, 0.12954582291539762, 0.12970814533966, 0.1296031641530952, 0.12937682220918054, 0.12867857599371874, 0.12771330717499782, 0.12681162258564602, 0.12618186020673053, 0.1257200657575284, 0.12576135100922795, 0.1257899850332097, 0.1253174629060752, 0.1249005850837106, 0.12438708198941496, 0.1237726290682878, 0.12297292755332581, 0.12215760505192143, 0.12161079073302697, 0.1210043889729597, 0.12062843820589576, 0.12057978091399828, 0.11890469040393556, 0.11744125652380377, 0.11639735937970047, 0.11566169847692206, 0.11479997895327167, 0.11407383120835032, 0.11298726290483987, 0.11224695083829142, 0.11115857857623383, 0.10951167619693147, 0.10846604574951636, 0.1068562924923061, 0.10537378538488988, 0.10361015009308501, 0.10251154719511997, 0.10111221006276712, 0.10005639427420872, 0.0994162597944748, 0.0981054986364339, 0.09642834938901225, 0.09577063456053647, 0.094602693573614, 0.09377300801091527, 0.09261397729251329, 0.09133455424045714, 0.09103636580511942, 0.0905844347297309, 0.09050960790468517, 0.0897167993300375, 0.0888065814118088, 0.08822426845283517, 0.08817954091887015, 0.08694651488898758, 0.08633093055355351, 0.0863350444734945, 0.08549490353437773, 0.08424157882139485, 0.08383867630267967, 0.08257597552727505, 0.08157516704900879, 0.0808518277044273, 0.0804899529806821, 0.0800674450266929, 0.0789908651738158, 0.07780556448130045, 0.07720416076538204, 0.07694140624137544, 0.07662647902934845, 0.07572924285781735, 0.07515423174145826, 0.07513324802218731, 0.07432379273504466, 0.07367185438656222, 0.07299176084925647, 0.07265076018427187, 0.07252551619127998, 0.07243266384036884, 0.07182272901201732, 0.07116367997775803, 0.07087500525278372, 0.0699090816693911, 0.06925980124786525, 0.0685707485683885, 0.06792222018342715, 0.06708704025222813, 0.06620597500908769, 0.06545870207381604, 0.06450194467981946, 0.06367097322240954, 0.06292289657063664, 0.06282257633988425, 0.06279497523448105, 0.06275384262805377, 0.06186149781193707, 0.061891544561937975, 0.06147815260860757, 0.06115570155488232, 0.0603511615853737, 0.05993162259390832, 0.05941409996511842, 0.05936557267567472, 0.05839900781667394, 0.05746325606258601, 0.05693762314969068, 0.05636912675952699, 0.05588929158495486, 0.05559598736390279, 0.055048223633966886, 0.054857312223115906, 0.054665406992146726, 0.05384936079044244, 0.05339771758921069, 0.05316221377748269, 0.05293250887408805, 0.05248576645617119, 0.05216434153756113, 0.05109502500036191, 0.05130432918718464, 0.05055603602716754, 0.050220260567976883, 0.04992784597250649, 0.04963090881428577, 0.04926785943660364, 0.04882379111318469, 0.04763746987278646, 0.0468339522531394, 0.046778375029263984, 0.046555277766214855, 0.04618646004483551, 0.045541588119663474, 0.045040851059726765, 0.04431435965535371, 0.0435128887956304, 0.04333161239163292, 0.042870082947738086, 0.04287591091530348, 0.04282928329797815, 0.04241347648240558, 0.04194090702244358, 0.04118838889122104, 0.04061121845863955, 0.04054628933367009, 0.0404145366686514, 0.04001978779926637, 0.039027839083475305, 0.038398142094968044, 0.03840639483949982, 0.038144026438123584, 0.037309974998643344, 0.036973155713572785, 0.03660680539930722, 0.03641854926700108, 0.03544507946642602, 0.03483507748338008, 0.033829199552327445, 0.033090536452142556, 0.032254909968631576, 0.031812398497984846, 0.03060467050815371, 0.029807032375233855, 0.029339615942189572, 0.029113754008535383, 0.02873033921368375, 0.028290016778106105, 0.02788871426073997, 0.02714186011304116, 0.027202303080384477, 0.026724770386620217, 0.026557941732702255, 0.02539679978023264, 0.024984824357912116, 0.024661553607796545, 0.024569915815691245, 0.024195589527365276, 0.023421399647748576, 0.02319780121900836, 0.022460318123220375, 0.02190809572648484, 0.021375655142017003, 0.02068320274454391, 0.019070439927921987, 0.01802678147938924, 0.017671540401258505, 0.017461667080418464, 0.017166180076270483, 0.016476141347170185, 0.015604023478472513, 0.015028014827890911, 0.014348699568469868, 0.013215276354240059, 0.0123787167476502, 0.011701682453683172, 0.010829958949371204, 0.010279999323437096, 0.009834463031994473, 0.008716767228117867, 0.008371785965308368, 0.007924762066497882, 0.006801523412542276, 0.006224116761860614, 0.005520373228391206, 0.004600378227395862, 0.003723092082209038, 0.003524303383389596, 0.003016079903913787, 0.0027695013864488696, 0.002226111745026536, 0.0019260227143539457, 0.001523771603269427, 0.001324679683441518, 0.0011715076476123344, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0};


void generateSingleWaveform(Double_t ampl, Double_t time, Double_t *wave){
  for(int i = 0;i<NSamples;i++){
    if(i < time) {
      wave[i] = 0;
    } else {
      wave[i] = ampl*(exp(- (i-time)/300. ) - exp( -(i-time)/10.));
      wave[i] = 1.*myrand->Poisson(wave[i]);
    }

    
  }
}
void generateSingleWaveform2(Double_t ampl, Double_t time, Double_t *wave){
  for(int i = 0;i<NSamples;i++){
    if(i < time) {
      wave[i] = 0;
    } else {
      wave[i] = ampl*(unit_resp_ecal[ (int) (i-time) ]);
      wave[i] = 1.*myrand->Poisson(wave[i]);
    }

    
  }
}

void generateNoise(Double_t *wave) {
  for(int i = 0;i<NSamples;i++){
    wave[i] = myrand->Gaus(0.,3.2);
  }
}

void generateRandomWaveform(Double_t *wave){
  Double_t ampl;
  do {
    ampl  = myrand->Gaus(200,200);
    //  ampl  = myrand->Exp(170);
  } while (ampl < 10); 
    
  //Bunch duration - from 100 ns to 400 ns 
  Double_t time = 100. + myrand->Uniform(0,300);
 
  if(iWave < MAXNSIGNALS)
  times[iWave] = time;
  amps[iWave] = ampl;
  generateSingleWaveform(ampl, time, wave);

}


void addWaveform(Double_t *source, Double_t *dest){
for (int i = 0;i< NSamples;i++) {
    dest[i] += source[i];  //dest[i] = dest[i] + source[i];  source added to  dest
  }
}

void writeWaveform(FILE *fp,Double_t *wave){
  for(int i = 0;i<NSamples;i++){
    //    fprintf(fp,"%7.1lf",1.*myrand->Poisson(wave[i]));
    fprintf(fp,"%7.1lf",wave[i]);
  }
  fprintf(fp,"\n");
}



void writeLabels(FILE* fp, int *l){
  for(int i = 0;i<MAXNSIGNALS;i++) {
    fprintf(fp," %5d ",l[i]);
  }
  fprintf(fp,"\n");
}

void writeLabelstimes(FILE* fp, int *lt){
  for(int i = 0;i<NSamples;i++) {
    fprintf(fp," %5d ",lt[i]);
  }
  fprintf(fp,"\n");
}

void writeLabelstimesUP(FILE* fp, int *lt){
  for(int i = 0;i<NSamples*upscale_factor;i++) {
    fprintf(fp," %5d ",lt[i]);
  }
  fprintf(fp,"\n");
}

void writemaxTimes(FILE* fp, Double_t *times){
 for(int i = 0;i<MAXNSIGNALS;i++) {
   fprintf(fp,"%f  ",times[i]);
  }
  fprintf(fp,"\n");
}

void writemaxAmps(FILE* fp, Double_t *amps){
 for(int i = 0;i<MAXNSIGNALS;i++) {
   fprintf(fp,"%f  ",amps[i]);
  }
  fprintf(fp,"\n");

}



void generateSamples(){

  Double_t waveform[NSamples];
  Double_t tmpwave[NSamples];

  Double_t tAxis[NSamples];
  for(int i = 0;i<NSamples;i++) {
    tAxis[i] = i;
  }

  int labels[MAXNSIGNALS];
  int labeltime[NSamples];
  int labeltimeUP[NSamples*upscale_factor];
  int maxes[MAXNSIGNALS];

  FILE *fout;
  FILE *fall;
  FILE *flabel;
  FILE *flabeltimes;
  FILE *flabeltimesUP;
  FILE *ftime;
  FILE *famps;
    
 
  char fname[64];
  
  //TCanvas *c1 = new TCanvas();
  TH1F *sig = new TH1F("nSignals","Number of Signals",MAXNSIGNALS,0.0,MAXNSIGNALS);
  
  // fall = fopen("traindata-new.dat","w");
  // flabel = fopen("trainlabels-new.dat","w");

  fall = fopen("data1signal.dat","w");
  flabel = fopen("labels1signal.dat","w");
  flabeltimes = fopen("1024labels1signal.dat","w");
  flabeltimesUP = fopen("4096labels1signal.dat","w");
  ftime = fopen("times1signal.dat","w");
  famps = fopen("amlitudes1signal.dat","w");
  
  
  //  for (int NSignals = 0;NSignals < MAXNSIGNALS;NSignals++) {
    //To generate N waveforms

    
    //   sprintf(fname,"%d_signals.dat",NSignals);
    //  fout = fopen(fname,"w");
    
  for(int i = 0;i<NEvents;i++) {
      iWave = 0;
      for (int i = 0;i<MAXNSIGNALS;i++){
      times[i]=0;
      amps[i]=0;
      }
      //int NSignals = myrand->Uniform(0,MAXNSIGNALS);
      int NSignals = 1;
      // int NSignals;
      // do {
      // 	NSignals = myrand->Uniform(0,MAXNSIGNALS);
      // 	if (NSignals!=0){
      // 	  NSignals = myrand->Exp(1.0)+1;
      // 	}
	
      // } while (NSignals>MAXNSIGNALS);

      sig->Fill(NSignals);
      
      for(int i = 0;i<MAXNSIGNALS;i++) {
	if(i == NSignals) {
	  labels[i] = 1;
	} else {
	  labels[i] = 0;
	}	
      }

  
      //For each event:
      // 0. Random generation of number of signals in the waveform
      // 1. Generate noise
      // 2. Generate NSignals wavefors and add them to the noise waveform

      generateNoise(waveform);
      for(int iSignal = 0;iSignal<NSignals;iSignal ++) {
	generateRandomWaveform(tmpwave);
	addWaveform(tmpwave,waveform);
	 
         iWave++;

      }
      for (int i=0;i<NSamples;i++){
	  labeltime[i]=0;
	}
      for (int i=0;i<NSamples*upscale_factor;i++){
	  labeltimeUP[i]=0;
	}

	     
      for (int i = 0;i<MAXNSIGNALS;i++){
	int t=round(times[i]);
	int tUP=round(times[i]*upscale_factor);
	labeltime[t]=amps[i];
	labeltimeUP[tUP]=amps[i];
      }
	     
   	   
// for(int i = 0;i<NSamples;i++) {
// 	     if(i==round(times[iWave])) {
// 	   labeltime[i] = 1;
// 	 }
// 	 else{
// 	   labeltime[i] = 0;
// 	 }
//        }
      //      writeWaveform(fout,waveform);
      writeWaveform(fall,waveform);
      writeLabels(flabel,labels);
      writemaxTimes(ftime,times);   
      writeLabelstimes(flabeltimes,labeltime);
      writeLabelstimesUP(flabeltimesUP,labeltimeUP);	
      writemaxAmps(famps,amps);

      
      // TCanvas *c1 = new TCanvas(); c1->cd();
      // c1->cd();
      // c1->Clear();
      // TGraph *gr = new TGraph(NSamples,tAxis,waveform);
      // gr->Draw();
      // std::cout << "Number of hits:  " << NSignals << std::endl;
      // std::cout << "Time of  hits " << times[0]<<" "<< times[1]<<" "<< times[2]<<" "<< times[3]<<" "<< times[4]<<" " << std::endl;
      // ;
      // c1->Update();
      
      
      //getchar();

    }
    
    //  fclose(fout);
    // }

  fclose(fall);
  fclose(flabel);
  fclose(ftime);
  fclose(famps);
  fclose(flabeltimes);
  fclose(flabeltimesUP);

  // TCanvas *c1 = new TCanvas(); c1->cd();
  //     sig->Draw();
}

